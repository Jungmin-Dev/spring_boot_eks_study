apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: MyEKSCluster
  region: ap-northeast-2 # 원하는 리전을 입력합니다.
vpc:
  id: vpc-0bb8a03d37f060afa # VPC ID를 붙여넣습니다.
  cidr: 192.168.0.0/16
  securityGroup: sg-0388a373d8be0d1ee # EC2 보안그룹에서 Control Plane Security Group의 ID를 붙여넣습니다.
  subnets:
    private:
      ap-northeast-2a:
        id: subnet-08d1f0312cdf7a02d # Subnet의 cidr를 잘 확인하고 ID를 붙여넣습니다.
        cidr: 192.168.128.0/18
      ap-northeast-2b:
        id: subnet-07c328c91fe17a7cc # Subnet의 cidr를 잘 확인하고 ID를 붙여넣습니다.
        cidr: 192.168.192.0/18
  clusterEndpoints:
    publicAccess: false # Cluster에 대한 외부 접속을 차단합니다.
    privateAccess: true # VPC 내부 접속을 허용합니다.
managedNodeGroups:
  - name: EKS-PRODUCTION-NODE
    instanceType: t3.small
    availabilityZones:
      - ap-northeast-2a
      - ap-northeast-2b
    privateNetworking: true # privateAccess: true 인 경우 true로 설정해야 합니다.
    desiredCapacity: 1 # 초기에 생성하는 노드 갯수
    minSize: 1 # 최소 노드 갯수
    maxSize: 10 # 오토스케일링 시 늘어날 수 있는 최대 노드 갯수
    ssh: # use existing EC2 key
      allow: false # 노드에 대한 ssh 접속 차단
    iam:
      withAddonPolicies:
        imageBuilder: true # AWS ECR에 대한 권한 추가
        albIngress: true  # albIngress에 대한 권한 추가
        cloudWatch: true # cloudWatch에 대한 권한 추가
        autoScaler: true # auto scaling에 대한 권한 추가
    volumeSize: 20 # 노드의 볼륨 사이즈

  - name: EKS-PRODUCTION-NODE-SPOT
    instanceType: t3.small
    spot: true
    availabilityZones:
      - ap-northeast-2a
      - ap-northeast-2b
    privateNetworking: true # privateAccess: true 인 경우 true로 설정해야 합니다.
    desiredCapacity: 1 # 초기에 생성하는 노드 갯수
    minSize: 1 # 최소 노드 갯수
    maxSize: 2 # 오토스케일링 시 늘어날 수 있는 최대 노드 갯수
    ssh: # use existing EC2 key
      allow: false # 노드에 대한 ssh 접속 차단
    iam:
      withAddonPolicies:
        imageBuilder: true # AWS ECR에 대한 권한 추가
        albIngress: true  # albIngress에 대한 권한 추가
        cloudWatch: true # cloudWatch에 대한 권한 추가
        autoScaler: true # auto scaling에 대한 권한 추가
    volumeSize: 20 # 노드의 볼륨 사이즈

